{"version":3,"sources":["text.js","App.js","index.js"],"names":["randomInt","max","Math","floor","random","Text","props","state","text","handleSubmit","bind","handleChange","event","this","setState","target","value","s","retVal","replace","tokens","split","counts","keys","i","length","word","toLowerCase","undefined","push","sort","a","b","wordCount","toLocaleLowerCase","removeList","ctx","document","getElementById","getContext","intensity","includes","fontSize","font","fillStyle","fillText","measureText","width","fillCanvas","preventDefault","id","height","style","border","onChange","spellCheck","rows","cols","type","onClick","Component","App","ReactDOM","render","StrictMode"],"mappings":"+OAsDA,SAASA,EAAUC,GACf,OAAOC,KAAKC,MAAMD,KAAKE,SAASF,KAAKC,MAAMF,I,IAqDhCI,E,kDAjDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANN,E,yDASLE,GACTC,KAAKC,SAAS,CAACN,KAAKI,EAAMG,OAAOC,U,mCAGxBJ,GACT,IAAIK,EAAIJ,KAAKN,MAAMC,KAOfU,GANSD,EAAEE,QAAQ,gCAAgC,IArE/D,SAAmBC,GACfA,EAASA,EAAOC,MAAM,KAGtB,IAFA,IAAIC,EAAQ,GACRC,EAAK,GACDC,EAAE,EAAEA,EAAEJ,EAAOK,OAAOD,IAAI,CAC5B,IAAIE,EAAON,EAAOI,GAAGG,mBACDC,IAAjBN,EAAOI,IACNJ,EAAOI,GAAQ,EACfH,EAAKM,KAAKH,IAEVJ,EAAOI,KAOf,OAHAH,EAAKO,MAAK,SAACC,EAAEC,GACT,OAAOV,EAAOU,GAAKV,EAAOS,MAEvB,CAACR,EAAKD,GA0DIW,CALJhB,EAAEE,QAAQ,MAAM,IACTA,QAAQ,MAAO,KACfe,uBAhDxB,SAAoBX,EAAKD,GAOrB,IANA,IAAIa,EAAa,CAAC,MAAM,IAAI,KAAK,MAAO,KAAM,KAAM,KAAM,IAAK,KAAM,MAAO,OAAQ,KAAM,MAAO,MAC7E,MAAO,GAAI,KAAK,KAAM,KAAM,OAAQ,OAAO,MAAO,MAAO,KAAM,OAAQ,MAAO,KAAM,MAAO,OAAQ,OACnG,OAAO,KAAM,QAAS,KAAM,QAAS,MAAO,MAAO,MAAO,QAAS,OAAQ,KAAM,OAAQ,KAAM,OAAQ,OAAQ,QAE/HC,EADSC,SAASC,eAAe,aACpBC,WAAW,MACxBC,EAAY,EACRhB,EAAE,EAAEA,EAAED,EAAKE,OAAOD,IACtB,IAAIW,EAAWM,SAASlB,EAAKC,IAAI,CAC7B,IAAIkB,EAA2B,EAAhBpB,EAAOC,EAAKC,IAC3BgB,EAAYlB,EAAOC,EAAKC,IAAI,GAC5BY,EAAIO,KAAJ,eAAmBD,EAAnB,aACAN,EAAIQ,UAAJ,wBAAiCJ,EAAjC,MACAJ,EAAIS,SAAStB,EAAKC,GAAGxB,EAAU,IAAIoC,EAAIU,YAAYvB,EAAKC,IAAIuB,OAAO/C,EAAU,OAyCjFgD,CAFW9B,EAAO,GACLA,EAAO,IAGpBN,EAAMqC,mB,+BAIN,OACI,6BACI,yBAAKC,GAAG,OACR,4BAAQA,GAAG,YAAYH,MAAM,MAAMI,OAAO,MAAMC,MAAO,CAACC,OAAO,sBAG/D,yBAAKH,GAAG,KACJ,0BAAMA,GAAG,QACT,iDAAsB,6BAClB,8BAAUA,GAAG,WAAWlC,MAAQH,KAAKN,MAAMC,KAAM8C,SAAUzC,KAAKF,aAAc4C,WAAW,QAAQC,KAAK,KAAKC,KAAK,OAAiB,8BAEjI,4BAAQP,GAAG,QAAQQ,KAAK,SAASC,QAAU9C,KAAKJ,cAAhD,iB,GA1CLmD,aC1CJC,G,6KATP,OACI,yBAAKX,GAAG,SACR,0CACI,kBAAC,EAAD,W,GALEU,cCAlBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,U","file":"static/js/main.0ed690c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n/**\n * count words\n * @param {*} tokens \n */\nfunction wordCount(tokens){\n    tokens = tokens.split(\" \");\n    var counts ={};\n    var keys=[];\n    for(var i=0;i<tokens.length;i++){\n        var word = tokens[i].toLowerCase();\n        if(counts[word] === undefined){\n            counts[word] = 1;\n            keys.push(word);\n        }else{\n            counts[word]++;\n        }\n    }\n\n    keys.sort((a,b)=>{\n        return counts[b] - counts[a];\n    })\n    return [keys,counts]\n}\n/**\n * fill canvas with text\n * @param {*} keys \n * @param {*} counts \n */\nfunction fillCanvas(keys,counts){\n    var removeList = [\"the\",\"i\",\"to\",\"and\", \"of\", \"my\", \"in\", \"a\", \"is\", \"you\", \"this\", \"it\", \"his\", \"not\",\n                        \"but\", \"\", \"be\",\"me\", \"he\", \"your\", \"with\",\"for\", \"let\", \"on\", \"what\", \"are\", \"if\", \"him\", \"from\", \"will\", \n                        \"have\",\"by\", \"shall\", \"do\", \"would\", \"thy\", \"our\", \"how\", \"their\", \"they\", \"am\", \"very\", \"so\", \"more\", \"good\", \"come\"]\n    var canvas = document.getElementById(\"#myCanvas\");\n    var ctx = canvas.getContext(\"2d\");\n    var intensity = 1;\n    for(var i=0;i<keys.length;i++){\n        if(!removeList.includes(keys[i])){\n            var fontSize = counts[keys[i]]*3;\n            intensity = counts[keys[i]]/30\n            ctx.font = `bold ${fontSize}px Impact`;\n            ctx.fillStyle = `rgb(0,77,154, ${intensity} )`;\n            ctx.fillText(keys[i],randomInt(960-ctx.measureText(keys[i]).width),randomInt(600));\n            \n        }\n       \n       \n    }\n\n}\n/**\n * random integer\n * @param {int} max \n */\nfunction randomInt(max){\n    return Math.floor(Math.random()*Math.floor(max));\n}\n\nclass Text extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            text: ''\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({text:event.target.value});\n    }\n\n    handleSubmit(event){\n        var s = this.state.text;\n        var tokens = s.replace(/[.,\\/#!$%?\\^&\\*;:{}=\\-_`~()]/g,\"\");\n        tokens = s.replace('the',\"\");\n        tokens = tokens.replace(/\\n/g, \" \");\n        tokens = tokens.toLocaleLowerCase();\n\n        //word count \n        var retVal = wordCount(tokens);\n        var keys = retVal[0];\n        var counts = retVal[1];\n        fillCanvas(keys,counts);\n\n        event.preventDefault();\n    }\n\n    render() { \n        return ( \n            <div>\n                <div id=\"vis\">\n                <canvas id=\"#myCanvas\" width=\"960\" height=\"600\" style={{border:\"#333 10px solid\"}}>\n                </canvas>\n                </div>\n                <div id=\"f\">\n                    <form id=\"form\">\n                    <label>Paste Your Text<br></br>\n                        <textarea id=\"textArea\" value ={this.state.text} onChange={this.handleChange} spellCheck=\"false\" rows=\"10\" cols=\"60\" ></textarea><br></br>\n                    </label>\n                        <button id=\"count\" type=\"submit\" onClick ={this.handleSubmit}>Count!</button>\n                </form>\n                </div>\n            </div>\n         );\n    }\n}\n \nexport default Text;","import React, { Component } from 'react';\nimport Text from './text';\nimport './App.css';\n\n\nclass App extends Component {\n    render() { \n        return (  \n            <div id=\"title\">\n            <h1>Word Count</h1>\n                <Text />\n            </div>\n        );\n    }\n}\n \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}